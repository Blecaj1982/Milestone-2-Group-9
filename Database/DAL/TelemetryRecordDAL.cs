using System;

namespace FDMS.DAL
{
    /// <summary>
    /// Simple object representing Telemetry data for an aircraft. Used for
    /// transferring Telemetry information into and out of a database. One if
    /// constructors is for use by the FdmsDatabase and another is for use by
    /// client code
    /// </summary>
    public class TelemetryRecordDAL
    {
        public string AircraftTailNum { get; set; }
        public DateTime Timestamp { get; set; } // Time that the Telemetry data was generated by the aicraft
        public DateTime EntryTimestamp { get; set; } // Time at which the Telemetry data was inserted into the FDMS database
        public float Accel_X { get; set; }
        public float Accel_Y { get; set; }
        public float Accel_Z { get; set; }
        public float Weight { get; set; }
        public float Altitude { get; set; }
        public float Pitch { get; set; }
        public float Bank { get; set; }

        public TelemetryRecordDAL() { }

        /// <summary>
        /// Client code constructor for TelemetryRecordDAL. Lacks an EntryTimestamp parameter.
        /// </summary>
        public TelemetryRecordDAL(string aircraftTailNum, DateTime timestamp, GForceParameters gForceParameters, AltitudeParameters altitudeParameters) 
        {
            AircraftTailNum = aircraftTailNum;
            Timestamp = timestamp;
            Accel_X = gForceParameters.Accel_X;
            Accel_Y = gForceParameters.Accel_Y; 
            Accel_Z = gForceParameters.Accel_Z;
            Weight = gForceParameters.Weight;
            Altitude = altitudeParameters.Altitude;
            Pitch = altitudeParameters.Pitch;
            Bank = altitudeParameters.Bank;
        }

        /// <summary>
        /// Database constructor for TelemetryRecordDAL. 
        /// </summary>
        public TelemetryRecordDAL(string aircraftTailNum, DateTime timestamp, DateTime entryTimestamp, GForceParameters gForceParameters, AltitudeParameters altitudeParameters)
        {
            AircraftTailNum = aircraftTailNum;
            Timestamp = timestamp;
            EntryTimestamp = entryTimestamp;
            Accel_X = gForceParameters.Accel_X;
            Accel_Y = gForceParameters.Accel_Y; 
            Accel_Z = gForceParameters.Accel_Z;
            Weight = gForceParameters.Weight;
            Altitude = altitudeParameters.Altitude;
            Pitch = altitudeParameters.Pitch;
            Bank = altitudeParameters.Bank;
        }

        public override string ToString()
        {
            return $"{AircraftTailNum},{Timestamp},{Accel_X:N6},{Accel_Y:N6},{Accel_Z:N6},{Weight:N6},{Altitude:N6},{Pitch:N6},{Bank:N6}";
        }
    }

    public struct GForceParameters {
        public float Accel_X; 
        public float Accel_Y; 
        public float Accel_Z;
        public float Weight;
        public GForceParameters (float accelX, float accelY, float accelZ, float weight)
        {
            Accel_X = accelX; 
            Accel_Y = accelY;
            Accel_Z = accelZ;
            Weight = weight;
        }
    }

    public struct AltitudeParameters
    {
        public float Altitude;
        public float Pitch;
        public float Bank;

        public AltitudeParameters(float altitude, float pitch, float bank)
        {
            Altitude = altitude;
            Pitch = pitch;
            Bank = bank;
        }
    }
}
